--
-- testbench template
--
-- 2013-06-09 by JTA
--

library ieee;
library work;
use ieee.std_logic_1164.all;
use work.display_driver_pkg.all;

entity display_driver_tb is
end entity;

architecture TB of display_driver_tb is

constant PERIOD : time := 1 sec/90e6;

signal clk           : std_logic := '0';
signal reset         : std_logic := '1';

signal mem_addr      : std_logic_vector(19 downto 0);
signal mem_io        : std_logic_vector(7 downto 0);
signal mem_ce        : std_logic;
signal mem_oe        : std_logic;
signal mem_we        : std_logic;
signal leds          : std_logic_vector(2 downto 0);
signal data_in       : std_logic_vector(7 downto 0);
signal data_clk      : std_logic;
signal data_gpio     : std_logic_vector(1 downto 0);
signal disp_red      : std_logic_vector(7 downto 0);
signal disp_green    : std_logic_vector(7 downto 0);
signal disp_blue     : std_logic_vector(7 downto 0);
signal disp_clk      : std_logic;
signal disp_en       : std_logic;
signal disp_hsync    : std_logic;
signal disp_vsync    : std_logic;
signal disp_power    : std_logic := '0';
signal backlight_en  : std_logic := '0';
signal backlight_pwm : std_logic;

begin

  DUT_inst: display_driver
  generic map
  (
      MEM_ADDR_N     => mem_addr'length,     -- How wide is the memory address bus
      MEM_IO_N       => mem_io'length,      -- How wide is the memory IO bus
      LED_N          => leds'length,      -- Number of LEDs
      DATA_N         => data_in'length,      -- How wide is the data bus
      DISP_N         => disp_red'length,      -- How many bits per pixel color
      DISP_DELAY     => 1200000,-- 50ms with 20MHz clock
      CYCLES         => 20000,
      PWR_DELAY      => 200000, -- 10ms with 20MHz clock
      DATA_DELAY     => 1180000,
      DEF_BRIGHTNESS => 512-1,
      PWM_DIVIDE     => 5,      -- Sets the PWM frequency
      PWM_MAX        => 1024   -- Sets the amount of PWM steps
  )
  port map
  (
      clk           => clk,           --: in std_logic;
      mem_addr      => mem_addr,      --: out std_logic_vector(MEM_ADDR_N-1 downto 0);
      mem_io        => mem_io,        --: inout std_logic_vector(MEM_IO_N-1 downto 0);
      mem_ce        => mem_ce,        --: out std_logic; -- Memory chip enable
      mem_oe        => mem_oe,        --: out std_logic; -- Memory output enable
      mem_we        => mem_we,        --: out std_logic; -- Memory write enable
      leds          => leds,          --: out std_logic_vector(LED_N-1 downto 0);
      data_in       => data_in,       --: in std_logic_vector(DATA_N-1 downto 0);
      data_clk      => data_clk,      --: in std_logic;
      data_gpio     => data_gpio,     --: in std_logic_vector(1 downto 0);
      disp_red      => disp_red,      --: out std_logic_vector(DISP_N-1 downto 0);
      disp_green    => disp_green,    --: out std_logic_vector(DISP_N-1 downto 0);
      disp_blue     => disp_blue,     --: out std_logic_vector(DISP_N-1 downto 0);
      disp_clk      => disp_clk,      --: out std_logic;
      disp_en       => disp_en,       --: out std_logic;
      disp_hsync    => disp_hsync,    --: out std_logic;
      disp_vsync    => disp_vsync,    --: out std_logic;
      disp_power    => disp_power,    --: out std_logic;
      backlight_en  => backlight_en,  --: out std_logic;
      backlight_pwm => backlight_pwm  --: out std_logic
  );

  clk_gen: process(clk)
  begin
    clk <= not clk after PERIOD/2;
  end process;
  
  reset <= '1', '0' after 500 ns;
  
  tester: process
  begin
    wait until reset = '0';
    wait for 100 ns;
    backlight_en <= '1';
    wait;
  end process;

end;